---
- name: Chroot into the base system
  ansible.builtin.command:
    cmd: arch-chroot /mnt /bin/bash

- name: Set timezone to Istanbul
  command: ln -sf /usr/share/zoneinfo/Europe/Istanbul /etc/localtime
  args:
    chdir: /mnt
  notify: Update system clock

- name: Set hardware clock
  command: hwclock --systohc
  args:
    chdir: /mnt

- name: Prompt for hostname
  ansible.builtin.pause:
    prompt: "Enter the hostname for this system (e.g., foobox):"
  register: hostname_input

- name: Set hostname
  copy:
    content: "{{ hostname_input.user_input }}"
    dest: /mnt/etc/hostname

- name: Configure /etc/hosts
  copy:
    content: |
      127.0.0.1   localhost
      ::1         localhost
      127.0.1.1   {{ hostname_input.user_input }}.localdomain {{ hostname_input.user_input }}
    dest: /mnt/etc/hosts

- name: Uncomment necessary locales
  command: |
    sed -i '/^#en_US.UTF-8 UTF-8/s/^#//' /etc/locale.gen
    sed -i '/^#tr_TR.UTF-8 UTF-8/s/^#//' /etc/locale.gen
  args:
    chdir: /mnt
  notify: Generate locale

- name: Generate locale
  command: locale-gen
  args:
    chdir: /mnt

- name: Configure locale settings
  copy:
    content: |
      LANG=tr_TR.UTF-8
      LC_MESSAGES=en_US.UTF-8
      LC_ADDRESS=tr_TR.UTF-8
      LC_COLLATE=tr_TR.UTF-8
      LC_CTYPE=tr_TR.UTF-8
      LC_IDENTIFICATION=tr_TR.UTF-8
      LC_MEASUREMENT=tr_TR.UTF-8
      LC_MONETARY=tr_TR.UTF-8
      LC_NAME=tr_TR.UTF-8
      LC_NUMERIC=tr_TR.UTF-8
      LC_PAPER=tr_TR.UTF-8
      LC_TELEPHONE=tr_TR.UTF-8
      LC_TIME=tr_TR.UTF-8
    dest: /mnt/etc/locale.conf

- name: Configure console font and keymap
  copy:
    content: |
      KEYMAP=trq
      FONT=ter-d22b
    dest: /mnt/etc/vconsole.conf

- name: Set default editor
  copy:
    content: |
      EDITOR=nvim
      VISUAL=nvim
    dest: /mnt/etc/environment

- name: Verify root password with 3 attempts
  block:
    - name: Prompt for root password
      ansible.builtin.pause:
        prompt: "Enter the root password:"
      register: root_password_input

    - name: Confirm root password
      ansible.builtin.pause:
        prompt: "Confirm the root password:"
      register: root_password_confirm

    - name: Check if root passwords match
      fail:
        msg: "Passwords do not match. Try again."
      when: root_password_input.user_input != root_password_confirm.user_input
      retries: 3
      delay: 1
      until: root_password_input.user_input == root_password_confirm.user_input

    - name: Set root password
      command: echo "root:{{ root_password_input.user_input }}" | chpasswd
      args:
        chdir: /mnt

  rescue:
    - name: Fail the script if passwords do not match after 3 attempts
      fail:
        msg: "Failed to set root password after 3 attempts. Exiting script."

- name: Prompt for username
  ansible.builtin.pause:
    prompt: "Enter the username to be created (e.g., foo):"
  register: username_input

- name: Add user account with sudo privileges
  command: useradd -m -G wheel -s /bin/bash {{ username_input.user_input }}
  args:
    chdir: /mnt
  notify: Verify user password with 3 attempts

- name: Verify user password with 3 attempts
  block:
    - name: Prompt for user password
      ansible.builtin.pause:
        prompt: "Enter the password for user {{ username_input.user_input }}:"
      register: user_password_input

    - name: Confirm user password
      ansible.builtin.pause:
        prompt: "Confirm the password for user {{ username_input.user_input }}:"
      register: user_password_confirm

    - name: Check if user passwords match
      fail:
        msg: "Passwords do not match. Try again."
      when: user_password_input.user_input != user_password_confirm.user_input
      retries: 3
      delay: 1
      until: user_password_input.user_input == user_password_confirm.user_input

    - name: Set user password
      command: echo "{{ username_input.user_input }}:{{ user_password_input.user_input }}" | chpasswd
      args:
        chdir: /mnt

  rescue:
    - name: Fail the script if passwords do not match after 3 attempts
      fail:
        msg: "Failed to set user password after 3 attempts. Exiting script."

- name: Activate wheel group for sudo
  command: sed -i "s/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/" /etc/sudoers
  args:
    chdir: /mnt

- name: Enable NetworkManager
  command: systemctl enable NetworkManager
  args:
    chdir: /mnt

- name: Enable SSH server
  command: systemctl enable sshd.service
  args:
    chdir: /mnt

- name: Create keyfile for LUKS auto-unlock
  command: dd bs=512 count=4 iflag=fullblock if=/dev/random of=/crypto_keyfile.bin
  args:
    chdir: /mnt
  notify: Restrict keyfile access

- name: Restrict keyfile access
  command: chmod 600 /crypto_keyfile.bin
  args:
    chdir: /mnt

- name: Add keyfile to LUKS
  command: cryptsetup luksAddKey "{{ disk }}p2" /crypto_keyfile.bin
  args:
    chdir: /mnt

- name: Configure mkinitcpio
  block:
    - name: Add keyfile to mkinitcpio.conf
      lineinfile:
        path: /mnt/etc/mkinitcpio.conf
        regexp: "^FILES="
        line: "FILES=(/crypto_keyfile.bin)"

    - name: Add btrfs support to MODULES in mkinitcpio.conf
      lineinfile:
        path: /mnt/etc/mkinitcpio.conf
        regexp: "^MODULES="
        line: "MODULES=(btrfs)"

    - name: Set hooks in mkinitcpio.conf
      lineinfile:
        path: /mnt/etc/mkinitcpio.conf
        regexp: "^HOOKS="
        line: "HOOKS=(base udev keyboard autodetect keymap consolefont modconf block encrypt filesystems fsck)"

- name: Recreate initramfs image
  command: mkinitcpio -P
  args:
    chdir: /mnt

- name: Install GRUB and EFI boot manager
  command: pacman -S grub efibootmgr --noconfirm
  args:
    chdir: /mnt

- name: Get UUID of encrypted partition
  command: blkid -s UUID -o value "{{ disk }}p2"
  register: encrypted_uuid
  args:
    chdir: /mnt

- name: Configure GRUB with cryptdevice
  block:
    - name: Set GRUB_CMDLINE_LINUX_DEFAULT
      lineinfile:
        path: /mnt/etc/default/grub
        regexp: "^GRUB_CMDLINE_LINUX_DEFAULT="
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet cryptdevice=UUID={{ encrypted_uuid.stdout }}:cryptdev"'

    - name: Set GRUB_PRELOAD_MODULES
      lineinfile:
        path: /mnt/etc/default/grub
        regexp: "^GRUB_PRELOAD_MODULES="
        line: 'GRUB_PRELOAD_MODULES="part_gpt part_msdos luks"'

    - name: Enable GRUB cryptodisk
      lineinfile:
        path: /mnt/etc/default/grub
        regexp: "^#GRUB_ENABLE_CRYPTODISK="
        line: "GRUB_ENABLE_CRYPTODISK=y"

- name: Install GRUB in the ESP
  command: grub-install --target=x86_64-efi --efi-directory=/efi --boot-directory=/efi --bootloader-id=GRUB
  args:
    chdir: /mnt

- name: Verify GRUB entry in UEFI
  command: efibootmgr
  args:
    chdir: /mnt

- name: Generate GRUB configuration file
  command: grub-mkconfig -o /efi/grub/grub.cfg
  args:
    chdir: /mnt

- name: Verify cryptodisk and luks entries in GRUB config
  command: grep 'cryptodisk\|luks' /efi/grub/grub.cfg
  args:
    chdir: /mnt

- name: Exit chroot and reboot
  block:
    - command: exit
    - command: umount -R /mnt
    - command: reboot
