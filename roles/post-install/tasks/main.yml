---
- name: Check for failed systemd services
  command: systemctl --failed

- name: Check for high priority errors in the systemd journal
  command: journalctl -p 3 -xb

- name: Allow user to run sudo commands without password
  copy:
    content: "{{ username }} ALL=(ALL) NOPASSWD: ALL"
    dest: /etc/sudoers.d/sudoer_{{ username }}
    mode: "0440"

- name: Configure pacman.conf with desired options
  copy:
    content: |
      #{{{ General options
          [options]
          HoldPkg      = pacman glibc
          CleanMethod  = KeepInstalled
          Architecture = auto
          IgnorePkg   = nvdock
      #}}}

      #{{{ Misc options
          UseSyslog
          Color
          ILoveCandy
          CheckSpace
          ParallelDownloads = 5
      #}}}

      #{{{ Trust
          SigLevel           = Required DatabaseOptional
          LocalFileSigLevel  = Optional
          RemoteFileSigLevel = Required
      #}}}

      #{{{ Repositories
          [core]
          Include = /etc/pacman.d/mirrorlist

          [extra]
          Include = /etc/pacman.d/mirrorlist

          [community]
          Include = /etc/pacman.d/mirrorlist

          [multilib]
          Include = /etc/pacman.d/mirrorlist
      #}}}

      # vim:fdm=marker
    dest: /etc/pacman.conf
    mode: "0644"

- name: Update the system
  command: sudo pacman -Syu --noconfirm

- name: Install the Linux LTS kernel
  command: sudo pacman -S linux-lts --noconfirm

- name: Register the new kernel in GRUB
  command: sudo grub-mkconfig -o /efi/grub/grub.cfg

- name: Install util-linux for zramctl command
  command: sudo pacman -S util-linux --noconfirm

- name: Copy zram start script
  copy:
    src: zram_start
    dest: /usr/local/bin/zram_start
    mode: "0755"

- name: Copy zram stop script
  copy:
    src: zram_stop
    dest: /usr/local/bin/zram_stop
    mode: "0755"

- name: Create zram-swap systemd service
  copy:
    content: |
      [Unit]
      Description=Configure zram swap device
      After=local-fs.target

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/zram_start
      ExecStop=/usr/local/bin/zram_stop
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/zram-swap.service

- name: Enable zram-swap service
  command: sudo systemctl enable zram-swap.service

- name: Copy sysctl configuration
  copy:
    src: 99-sysctl.conf
    dest: /etc/sysctl.d/99-sysctl.conf


# Mevcut görevler burada devam ediyor...

- name: Install and configure mlocate
  block:
    - name: Install mlocate package
      command: sudo pacman -S mlocate --noconfirm

    - name: Update mlocate database
      command: sudo updatedb

- name: Enable TRIM for SSDs
  command: sudo systemctl enable fstrim.timer

- name: Install and configure pkgfile
  block:
    - name: Install pkgfile package
      command: sudo pacman -S pkgfile --noconfirm

    - name: Update pkgfile database
      command: sudo pkgfile --update

    - name: Edit .bashrc to enable command-not-found feature
      lineinfile:
        path: /home/{{ username }}/.bashrc
        regexp: '^if \[\[ -f /usr/share/doc/pkgfile/command-not-found.bash \]\]; then'
        line: |
          if [[ -f /usr/share/doc/pkgfile/command-not-found.bash ]]; then
              . /usr/share/doc/pkgfile/command-not-found.bash
          fi

    - name: Source .bashrc
      shell: source /home/{{ username }}/.bashrc
      args:
        executable: /bin/bash

- name: Install Pipewire and related packages
  command: sudo pacman -S pipewire pipewire-alsa pipewire-pulse pipewire-jack wireplumber alsa-utils --noconfirm

- name: Reboot the system after PipeWire installation
  reboot:

- name: Test if PipeWire is running
  shell: pactl info | grep Pipe
  register: pipewire_check
  failed_when: "pipewire_check.stdout.find('PipeWire') == -1"
  changed_when: false

- name: Test speakers
  command: speaker-test -c 2 -t wav -l 1

- name: Install yay AUR helper
  block:
    - name: Clone the yay-git repository
      git:
        repo: https://aur.archlinux.org/yay-git.git
        dest: /home/{{ username }}/yay-git
        clone: yes
        update: yes
        force: yes
        version: master

    - name: Build and install yay
      command: makepkg -si --noconfirm
      args:
        chdir: /home/{{ username }}/yay-git
      become: true
      become_user: "{{ username }}"

- name: Install Snapper and snap-pac
  command: sudo pacman -S snapper snap-pac --noconfirm

- name: Create Snapper root configuration
  block:
    - name: Unmount /.snapshots if mounted
      command: sudo umount /.snapshots
      ignore_errors: true

    - name: Remove existing /.snapshots directory
      file:
        path: /.snapshots
        state: absent

    - name: Create new Snapper configuration for root
      command: sudo snapper -c root create-config /

- name: Setup /.snapshots directory
  block:
    - name: Create and mount /.snapshots directory
      file:
        path: /.snapshots
        state: directory

    - name: Mount all filesystems
      command: sudo mount -a

    - name: Set permissions for /.snapshots
      file:
        path: /.snapshots
        owner: root
        group: wheel
        mode: "0750"

- name: Enable Snapper timeline and cleanup timers
  command: sudo systemctl enable --now snapper-timeline.timer snapper-cleanup.timer

- name: Configure Snapper for user
  block:
    - lineinfile:
        path: /etc/snapper/configs/root
        regexp: "^ALLOW_USERS="
        line: 'ALLOW_USERS="{{ username }}"'
    - lineinfile:
        path: /etc/snapper/configs/root
        regexp: "^TIMELINE_MIN_AGE="
        line: 'TIMELINE_MIN_AGE="1800"'
    - lineinfile:
        path: /etc/snapper/configs/root
        regexp: "^TIMELINE_LIMIT_HOURLY="
        line: 'TIMELINE_LIMIT_HOURLY="5"'
    - lineinfile:
        path: /etc/snapper/configs/root
        regexp: "^TIMELINE_LIMIT_DAILY="
        line: 'TIMELINE_LIMIT_DAILY="7"'
    - lineinfile:
        path: /etc/snapper/configs/root
        regexp: "^TIMELINE_LIMIT_WEEKLY="
        line: 'TIMELINE_LIMIT_WEEKLY="0"'
    - lineinfile:
        path: /etc/snapper/configs/root
        regexp: "^TIMELINE_LIMIT_MONTHLY="
        line: 'TIMELINE_LIMIT_MONTHLY="0"'
    - lineinfile:
        path: /etc/snapper/configs/root
        regexp: "^TIMELINE_LIMIT_YEARLY="
        line: 'TIMELINE_LIMIT_YEARLY="0"'

- name: Install and configure grub-btrfs
  block:
    - name: Install grub-btrfs package
      command: sudo pacman -S grub-btrfs --noconfirm

    - name: Set grub directory for grub-btrfs
      lineinfile:
        path: /etc/default/grub-btrfs/config
        regexp: "^GRUB_BTRFS_GRUB_DIRNAME="
        line: 'GRUB_BTRFS_GRUB_DIRNAME="/efi/grub"'

    - name: Enable grub-btrfs.path service
      command: sudo systemctl enable --now grub-btrfs.path

- name: Exclude .snapshots from updatedb
  lineinfile:
    path: /etc/updatedb.conf
    regexp: "^PRUNENAMES="
    line: 'PRUNENAMES=".snapshots"'

- name: Enable overlayfs for read-only snapshots
  block:
    - lineinfile:
        path: /etc/mkinitcpio.conf
        regexp: "^HOOKS="
        line: "HOOKS=(base udev autodetect modconf block filesystems keyboard fsck grub-btrfs-overlayfs)"

    - name: Regenerate initramfs
      command: sudo mkinitcpio -P

- name: Manual snapshot creation example
  command: sudo snapper -c root create -d "Base system install"

- name: Install X.Org and its utilities
  command: sudo pacman -S xorg xorg-apps 	xorg-server xorg-xinit xdotool xclip xsel --noconfirm

- name: Install and configure LightDM
  block:
    - name: Install LightDM and related packages
      command: sudo pacman -S lightdm lightdm-gtk-greeter oblogout --noconfirm

    - name: Enable LightDM service
      command: sudo systemctl enable lightdm.service

    - name: Configure LightDM greeter
      lineinfile:
        path: /etc/lightdm/lightdm.conf
        regexp: "^#greeter-session="
        line: "greeter-session=lightdm-gtk-greeter"

- name: Install additional system utilities
  command: sudo pacman -S dbus intel-ucode fuse2 lshw powertop inxi acpi base-devel git zip unzip htop tree w3m dialog reflector bash-completion arandr iw wpa_supplicant tcpdump mtr net-tools conntrack-tools ethtool wget rsync socat openbsd-netcat axel sof-firmware --noconfirm

- name: Install i3 window manager and utilities
  command: sudo pacman -S i3-wm i3status i3lock pango lxappearance polybar rofi ranger alacritty dunst feh xss-lock light --noconfirm

- name: Install fonts
  command: sudo pacman -S ttf-dejavu ttf-freefont ttf-liberation ttf-droid terminus-font noto-fonts noto-fonts-emoji ttf-ubuntu-font-family ttf-roboto --noconfirm

- name: Install and enable Bluetooth support
  block:
    - name: Install Bluetooth packages
      command: sudo pacman -S bluez bluez-utils blueman --noconfirm

    - name: Enable Bluetooth service
      command: sudo systemctl enable bluetooth

- name: Install network utilities
  command: sudo pacman -S nm-connection-editor networkmanager-openvpn --noconfirm

- name: Install Python package managers
  command: sudo pacman -S python-pip python-poetry --noconfirm

- name: Configure font rendering
  block:
    - file:
        src: /etc/fonts/conf.avail/10-sub-pixel-rgb.conf
        dest: /etc/fonts/conf.d/10-sub-pixel-rgb.conf
        state: link

    - file:
        src: /etc/fonts/conf.avail/11-lcdfilter-default.conf
        dest: /etc/fonts/conf.d/11-lcdfilter-default.conf
        state: link

# Mevcut görevler burada devam ediyor...

- name: Install Fail2Ban
  command: sudo pacman -S fail2ban --noconfirm

- name: Create jail.local configuration for Fail2Ban
  copy:
    content: |
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/sshd_auth.log
      maxretry = 2
      findtime = 300000
      bantime = -1
    dest: /etc/fail2ban/jail.local
    mode: "0644"

- name: Enable and start Fail2Ban service
  command: sudo systemctl enable --now fail2ban

- name: Check Fail2Ban service status
  command: sudo systemctl status fail2ban

- name: Check Fail2Ban logs
  command: sudo tail -n 20 /var/log/fail2ban.log

- name: Check status of sshd jail
  command: sudo fail2ban-client status sshd

- name: Install ttyd for sharing terminal over the internet
  command: sudo pacman -S ttyd --noconfirm

- name: Install dool for server status monitoring
  command: sudo pacman -S dool --noconfirm

- name: Install nmap for port scanning
  command: sudo pacman -S nmap --noconfirm

- name: Example usage of ttyd to share top command
  shell: ttyd top
  async: 0
  poll: 0

- name: Example usage of nmap to check open ports on localhost
  command: nmap -p- localhost
